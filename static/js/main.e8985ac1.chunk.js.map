{"version":3,"sources":["auth/react-auth0-wrapper.js","components/Header.js","components/Like.js","utils/TimeDifference.js","components/Post.js","components/Follow.js","components/Profile.js","components/Feed.js","components/Upload.js","components/SecuredRoute.js","components/App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Header","isAuthenticated","loginWithRedirect","user","logout","className","to","onClick","sub","FETCH_LIKES","gql","LIKE_POST","DELETE_LIKE","Like","props","useState","liked","setLiked","countLikes","setCountLikes","userId","useRef","current","useMutation","variables","postId","refetchQueries","query","id","likePost","deleteLike","useQuery","loading","error","data","message","Post","Likes","length","Likes_aggregate","aggregate","count","timeDifferenceForDate","date","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","POST_INFO","match","params","Container","map","post","index","key","User","alt","name","src","avatar","caption","url","created_at","FETCH_FOLLWERS","FOLLOW_USER","UNFOLLOW_USER","Follow","followed","setFollowed","firstRun","followingId","NUMBER_OF_FOLLOWERS","NUMBER_OF_FOLLOWING","followUser","unfollowUser","Button","variant","USER_INFO","withRouter","isLoggedUser","dataFollowers","dataFollowing","Row","Col","xs","Posts_aggregate","Follow_aggregate","class","POST_LIST","Feed","SUBMIT_POST","Upload","modalShow","setModalShow","setCaption","setUrl","setError","submitPost","Modal","show","onHide","size","aria-labelledby","centered","closeButton","Title","Body","onSubmit","e","preventDefault","catch","console","log","toString","value","onChange","target","type","SecuredRoute","Component","component","path","render","App","accessToken","setAccessToken","getTokenSilently","a","token","getAccessToken","httpLink","HttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","exact","Profile","Boolean","hostname","ReactDOM","children","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","Provider","getIdTokenClaims","getTokenWithPopup","domain","config","client_id","clientId","audience","redirect_uri","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAIMA,EAA4B,kBAChCC,OAAOC,QAAQC,aAAa,GAAIC,SAASC,MAAOJ,OAAOK,SAASC,WAErDC,EAAeC,IAAMC,gBACrBC,EAAW,kBAAMC,qBAAWJ,IC2B1BK,MA9Bf,WAAmB,IAAD,EAC6CF,IAArDG,EADQ,EACRA,gBAAiBC,EADT,EACSA,kBAA2BC,GADpC,EAC4BC,OAD5B,EACoCD,MAEpD,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,iBAAiBC,GAAG,MAApC,eAIAL,GACA,oCACE,4BACEI,UAAU,kCACVE,QAAS,kBAAML,EAAkB,QAKtCD,GACC,oCACE,kBAAC,IAAD,CAAMI,UAAU,kBAAkBC,GAAI,UAAYH,EAAKK,U,8yBCrBnE,IAAMC,EAAcC,YAAH,KAeXC,EAAYD,YAAH,KAQTE,EAAcF,YAAH,KAqGFG,MA3Ff,SAAcC,GAAQ,IAAD,EACehB,IAA1BG,EADW,EACXA,gBAAiBE,EADN,EACMA,KADN,EAIOY,oBAAS,GAJhB,mBAIZC,EAJY,KAILC,EAJK,OAMiBF,oBAAU,GAN3B,mBAMZG,EANY,KAMAC,EANA,KASbC,EAASC,iBAAO,MAGpBD,EAAOE,QADLrB,EACeE,EAAKK,IAEL,OAdA,MAkBAe,YAAYZ,EAAW,CACxCa,UAAW,CAAEC,OAAQX,EAAMW,OAAQL,OAAQA,EAAOE,SAClDI,eAAgB,CACd,CACEC,MAAOlB,EACPe,UAAW,CAAEI,GAAId,EAAMW,OAAQL,OAAQA,EAAOE,aAL7CO,EAlBY,sBA6BEN,YAAYX,EAAa,CAC5CY,UAAW,CAAEC,OAAQX,EAAMW,OAAQL,OAAQA,EAAOE,SAClDI,eAAgB,CACd,CACEC,MAAOlB,EACPe,UAAW,CAAEI,GAAId,EAAMW,OAAQL,OAAQA,EAAOE,aAL7CQ,EA7BY,sBAwCcC,YAAStB,EAAa,CACrDe,UAAW,CAAEI,GAAId,EAAMW,OAAQL,OAAQA,EAAOE,WADxCU,EAxCW,EAwCXA,QAASC,EAxCE,EAwCFA,MAAOC,EAxCL,EAwCKA,KAKxB,OAAIF,EAAgB,aAEhBC,EAAa,UAAN,OAAiBA,EAAME,WAGd,IAAhBjB,IAEEgB,EAAKE,KAAK,GAAGC,MAAMC,OAAS,GAC9BrB,GAAS,GAIXE,EAAce,EAAKE,KAAK,GAAGG,gBAAgBC,UAAUC,QAIrD,yBAAKpC,UAAU,uBACZJ,GACC,qCACIe,GACA,4BACEX,UAAU,sCACVE,QAAS,WACPsB,IACAZ,GAAS,GACTE,EAAcD,EAAa,MAIhCF,GACC,4BACEX,UAAU,sCACVE,QAAS,WACPuB,IACAb,GAAS,GACTE,EAAcD,EAAa,OAMpCA,EAAa,0BAAMb,UAAU,cAAca,EAA9B,UAAyD,QCjGpE,SAASwB,EAAsBC,GAGpC,OA/BJ,SAAwBrB,EAASsB,GAC7B,IAMMC,EAAUvB,EAAUsB,EAE1B,OAAIC,EAAUC,IACL,WAGLD,EAZ0B,IAarB,sBACEA,EAbiBC,KAcnBC,KAAKC,MAAMH,EAfU,KAeyB,WAC5CA,EAdgBI,MAelBF,KAAKC,MAAMH,EAhBQC,MAgByB,SAC1CD,EAfkBK,OAgBpBH,KAAKC,MAAMH,EAjBOI,OAiByB,YACzCJ,EAhBiBK,QAiBnBH,KAAKC,MAAMH,EAlBSK,QAkByB,UAE7CH,KAAKC,MAAMH,EAnBQK,SAmByB,aAO9CC,EAFK,IAAIC,MAAOC,UACP,IAAID,KAAKT,GAAMU,W,sRCrB5B,IAAMC,EAAY5C,YAAH,KAmEP0B,MAnDf,SAActB,GACZ,IAAIW,EAASX,EAAMc,GAAKd,EAAMc,GAAKd,EAAMyC,MAAMC,OAAO5B,GADnC,EAGcG,YAASuB,EAAW,CACnD9B,UAAW,CAAEI,GAAIH,KADXO,EAHW,EAGXA,QAASC,EAHE,EAGFA,MAAOC,EAHL,EAGKA,KAIxB,OAAIF,EAAgB,GAChBC,EAAa,UAAN,OAAiBA,EAAME,SAGhC,oCACE,kBAACsB,EAAA,EAAD,KACGvB,EAAKE,KAAKsB,IAAI,SAACC,EAAMC,GAAP,OACb,6BAASvD,UAAU,OAAOwD,IAAKD,GAC7B,gCACE,yBAAKvD,UAAU,aACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAMC,GAAI,UAAYqD,EAAKG,KAAKlC,IAC9B,yBAAKmC,IAAKJ,EAAKG,KAAKE,KAAMC,IAAKN,EAAKG,KAAKI,WAG7C,yBAAK7D,UAAU,sBACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAI,UAAYqD,EAAKG,KAAKlC,IACvD,8BAAO+B,EAAKG,KAAKE,UAKzB,yBAAK3D,UAAU,cACb,yBAAKA,UAAU,iBACb,yBAAK0D,IAAKJ,EAAKQ,QAASF,IAAKN,EAAKS,QAGtC,kBAAC,EAAD,CAAM3C,OAAQA,IACd,yBAAKpB,UAAU,gBACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAI,UAAYqD,EAAKG,KAAKlC,IACvD,gCAAS+B,EAAKG,KAAKE,OAFvB,OAISL,EAAKQ,SAEd,yBAAK9D,UAAU,aACZqC,EAAsBiB,EAAKU,mB,m2BC3D1C,IAAMC,EAAiB5D,YAAH,KAad6D,EAAc7D,YAAH,KAUX8D,EAAgB9D,YAAH,KAuHJ+D,MA1Gf,SAAgB3D,GAAQ,IAAD,EACahB,IAA1BG,EADa,EACbA,gBAAiBE,EADJ,EACIA,KADJ,EAIWY,oBAAS,GAJpB,mBAId2D,EAJc,KAIJC,EAJI,KAOfC,EAAWvD,kBAAO,GAGlBD,EAASC,iBAAO,MAGpBD,EAAOE,QADLrB,EACeE,EAAKK,IAEL,OAfE,MAmBAe,YAAYgD,EAAa,CAC5C/C,UAAW,CAAEqD,YAAa/D,EAAMc,GAAIR,OAAQA,EAAOE,SACnDI,eAAgB,CACd,CACEC,MAAO2C,EACP9C,UAAW,CAAEqD,YAAa/D,EAAMc,GAAIR,OAAQA,EAAOE,UAErD,CACEK,MAAOmD,EACPtD,UAAW,CAAEI,GAAId,EAAMc,KAEzB,CACED,MAAOoD,EACPvD,UAAW,CAAEI,GAAIR,EAAOE,aAbvB0D,EAnBc,sBAsCEzD,YAAYiD,EAAe,CAChDhD,UAAW,CAAEqD,YAAa/D,EAAMc,GAAIR,OAAQA,EAAOE,SACnDI,eAAgB,CACd,CACEC,MAAO2C,EACP9C,UAAW,CAAEqD,YAAa/D,EAAMc,GAAIR,OAAQA,EAAOE,UAErD,CACEK,MAAOmD,EACPtD,UAAW,CAAEI,GAAId,EAAMc,KAEzB,CACED,MAAOoD,EACPvD,UAAW,CAAEI,GAAIR,EAAOE,aAbvB2D,EAtCc,sBAyDYlD,YAASuC,EAAgB,CACxD9C,UAAW,CAAEqD,YAAa/D,EAAMc,GAAIR,OAAQA,EAAOE,WAD7CU,EAzDa,EAyDbA,QAASC,EAzDI,EAyDJA,MAAOC,EAzDH,EAyDGA,KAKxB,OAAIF,EAAgB,aAEhBC,EAAa,UAAN,OAAiBA,EAAME,UAG9ByC,EAAStD,UAEPY,EAAKuC,OAAOnC,OAAS,GACvBqC,GAAY,GAGdC,EAAStD,SAAU,GAInB,yBAAKjB,UAAU,wBACXqE,GACA,kBAACQ,EAAA,EAAD,CACEC,QAAQ,oBACR9E,UAAU,iBACVE,QAAS,WACPyE,IACAL,GAAY,KALhB,UAWDD,GACC,kBAACQ,EAAA,EAAD,CACEC,QAAQ,kBACR9E,UAAU,iBACVE,QAAS,WACP0E,IACAN,GAAY,KALhB,gB,oyBC9HD,IAAMS,EAAY1E,YAAH,KAqBTqE,EAAsBrE,YAAH,KAUnBoE,EAAsBpE,YAAH,KA6HjB2E,kBAnHf,SAAiBvE,GAAQ,IAAD,EACoBhB,IAAlCG,EADc,EACdA,gBAAiBG,EADH,EACGA,OAAQD,EADX,EACWA,KAE3BmF,EAAe,WACnB,OAAInF,EAAKK,MAAQM,EAAMyC,MAAMC,OAAO5B,IAJhB,EAWWG,YAASqD,EAAW,CACnD5D,UAAW,CAAEI,GAAId,EAAMyC,MAAMC,OAAO5B,MAD9BI,EAXc,EAWdA,QAASC,EAXK,EAWLA,MAAOC,EAXF,EAWEA,KAIlBqD,EAAgBxD,YAAS+C,EAAqB,CAClDtD,UAAW,CAAEI,GAAId,EAAMyC,MAAMC,OAAO5B,MAGhC4D,EAAgBzD,YAASgD,EAAqB,CAClDvD,UAAW,CAAEI,GAAId,EAAMyC,MAAMC,OAAO5B,MAGtC,OAAII,EAAgB,aAChBC,EAAa,UAAN,OAAiBA,EAAME,SAE9BqD,EAAcxD,QAAgB,aAC9BuD,EAAcvD,QAAgB,aAE9BwD,EAAcvD,MAAa,UAAN,OAAiBA,EAAME,SAC5CoD,EAActD,MAAa,UAAN,OAAiBA,EAAME,SAG9C,oCACE,kBAACsB,EAAA,EAAD,CAAWpD,UAAU,aACnB,kBAACoD,EAAA,EAAD,CAAWpD,UAAU,mBAClB6B,EAAK4B,KAAKJ,IAAI,SAACvD,EAAMyD,GAAP,OACb,kBAAC6B,EAAA,EAAD,CAAK5B,IAAKD,GACR,kBAAC8B,EAAA,EAAD,CAAKC,GAAI,GACP,yBACEtF,UAAU,iBACV0D,IAAK5D,EAAK6D,KACVC,IAAK9D,EAAK+D,UAGd,kBAACwB,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKrF,UAAU,mBAAmBsF,GAAG,QAClCxF,EAAK6D,MAGR,kBAAC0B,EAAA,EAAD,CAAKrF,UAAU,iBAAiBsF,GAAI,GACjC1F,GACC,oCACGqF,KACC,oCACE,kBAACJ,EAAA,EAAD,CACEC,QAAQ,oBACR9E,UAAU,iBACVE,QAAS,kBAAMH,MAHjB,aASFkF,KACA,kBAAC,EAAD,CAAQ1D,GAAId,EAAMyC,MAAMC,OAAO5B,QAMzC,kBAAC6D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKrF,UAAU,gBAAgBsF,GAAG,QAChC,gCAASxF,EAAKyF,gBAAgBpD,UAAUC,OAAgB,IAD1D,SAIA,kBAACiD,EAAA,EAAD,CAAKrF,UAAU,gBAAgBsF,GAAG,QAChC,gCACGJ,EAAcrD,KAAK2D,iBAAiBrD,UAAUC,OACvC,IAHZ,aAMA,kBAACiD,EAAA,EAAD,CAAKrF,UAAU,gBAAgBsF,GAAG,QAChC,gCACGH,EAActD,KAAK2D,iBAAiBrD,UAAUC,OACvC,IAHZ,mBAWV,6BACA,kBAACgD,EAAA,EAAD,KACGvD,EAAKE,KAAKsB,IAAI,SAACC,EAAMC,GAAP,OACb,kBAAC,IAAD,CAAMtD,GAAI,UAAYqD,EAAK/B,GAAIiC,IAAKD,GAClC,kBAAC8B,EAAA,EAAD,CAAKC,GAAI,EAAGtF,UAAU,gBACpB,yBAAKyF,MAAM,sBACT,yBACEzF,UAAU,qBACV0D,IAAKJ,EAAKQ,QACVF,IAAKN,EAAKS,gB,8IClJvB,IAAM2B,GAAYrF,YAAH,KA0BPsF,OAlBf,SAAclF,GAAQ,IAAD,EAEciB,YAASgE,IAAlC/D,EAFW,EAEXA,QAASC,EAFE,EAEFA,MAAOC,EAFL,EAEKA,KAExB,OAAIF,EAAgB,aAChBC,EAAa,UAAN,OAAiBA,EAAME,SAGhC,oCAEGD,EAAKE,KAAKsB,IAAI,SAACC,EAAMC,GAAP,OACX,kBAAC,EAAD,CAAMhC,GAAI+B,EAAK/B,GAAIiC,IAAKD,Q,sQCjBlC,IAAMqC,GAAcvF,YAAH,MAiGFwF,OAzFf,WAAmB,IAAD,EACkBtG,IAAMmB,UAAS,GADjC,mBACToF,EADS,KACEC,EADF,KAGRjG,EAASL,IAATK,KAHQ,EAKcY,mBAAS,IALvB,mBAKToD,EALS,KAKAkC,EALA,OAMMtF,mBAAS,IANf,mBAMTqD,EANS,KAMJkC,EANI,OAOUvF,mBAAS,IAPnB,mBAOTkB,EAPS,KAOFsE,EAPE,OASKhF,YAAY0E,IAA1BO,EATS,oBAWhB,OACE,oCACE,4BACEnG,UAAU,kCACVE,QAAS,kBAAM6F,GAAa,MAG9B,kBAACK,GAAA,EAAD,CACEC,KAAMP,EACNQ,OAAQ,kBAAMP,GAAa,IAC3BQ,KAAK,KACLC,kBAAgB,gCAChBC,UAAQ,GAER,kBAACL,GAAA,EAAMzG,OAAP,CAAc+G,aAAW,GACvB,kBAACN,GAAA,EAAMO,MAAP,CAAapF,GAAG,iCAAhB,WAEF,kBAAC6E,GAAA,EAAMQ,KAAP,KACE,kBAACxD,EAAA,EAAD,KACE,0BACEyD,SAAU,SAAAC,GACRA,EAAEC,iBACFZ,EAAW,CACThF,UAAW,CAAE2C,UAAS/C,OAAQjB,EAAKK,IAAK4D,OACxC1C,eAAgB,CACd,CAAEC,MAAOoE,IACT,CAAEpE,MAAOyD,EAAW5D,UAAW,CAAEI,GAAIzB,EAAKK,SAE3C6G,MAAM,SAASpF,GAChBqF,QAAQC,IAAItF,GACZsE,EAAStE,EAAMuF,cAIjBnB,EAAW,IACXC,EAAO,MAGT,kBAACb,EAAA,EAAD,KACE,sFAEF,kBAACA,EAAA,EAAD,KACE,2BACEgC,MAAOrD,EACPsD,SAAU,SAAAP,GAAC,OAAIb,EAAOa,EAAEQ,OAAOF,QAC/BG,KAAK,UAGT,kBAACnC,EAAA,EAAD,KACE,2CAEF,kBAACA,EAAA,EAAD,KACE,2BACEgC,MAAOtD,EACPuD,SAAU,SAAAP,GAAC,OAAId,EAAWc,EAAEQ,OAAOF,QACnCG,KAAK,UAGT,kBAACnC,EAAA,EAAD,KACE,kBAACP,EAAA,EAAD,CACEC,QAAQ,eACR9E,UAAU,6BACVuH,KAAK,SACLH,MAAM,SACNlH,QAAS,kBAAM6F,GAAa,KAL9B,WAUDnE,QC9EA4F,OAdf,SAAsB/G,GAAQ,IACVgH,EAAmBhH,EAA9BiH,UAAsBC,EAAQlH,EAARkH,KADF,EAEoBlI,IAAvCG,EAFmB,EAEnBA,gBAAiBC,EAFE,EAEFA,kBACzB,OACE,kBAAC,IAAD,CAAO8H,KAAMA,EAAMC,OAAQ,WACvB,OAAKhI,EAIE,kBAAC6H,EAAD,OAHL5H,EAAkB,IACX,mC,omBC6EFgI,OArEf,WAAgB,IAAD,EAEqBpI,IAA1BG,EAFK,EAELA,gBAFK,KAEYE,KAIaY,mBAAS,KANlC,mBAMNoH,EANM,KAMOC,EANP,OAQyBtI,IAA9BuI,EARK,EAQLA,iBACR,GATa,EAQarG,QAExB,MAAO,cAIW,sCAAG,4BAAAsG,EAAA,8EAGCD,IAHD,OAGbE,EAHa,OAInBH,EAAeG,GAJI,gDAOnBjB,QAAQC,IAAR,MAPmB,uDAAH,qDAUpBiB,GAGA,IAAMC,EAAW,IAAIC,KAAS,CAC5BC,IAAK,uDAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAEhC,OADcZ,EAEL,CACLY,QAAQ,GAAD,GACFA,EADE,CAELC,cAAc,UAAD,OALLb,MASL,CACLY,QAAQ,GAAD,GACFA,MAMLE,EAAS,IAAIC,KAAa,CAC9BC,KAAMP,EAASQ,OAAOX,GACtBY,MAAO,IAAIC,OAGb,OACE,kBAAC,KAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,MACChJ,GAAmB,kBAAC,GAAD,MACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsJ,OAAK,EAACvB,KAAK,KAAKD,UAAW/B,KAClC,kBAAC,IAAD,CAAOgC,KAAM,aAAcD,UAAW3F,IACtC,kBAAC,GAAD,CAAc4F,KAAM,aAAcD,UAAWyB,OCrEjCC,QACW,cAA7BrK,OAAOK,SAASiK,UAEe,UAA7BtK,OAAOK,SAASiK,UAEhBtK,OAAOK,SAASiK,SAASnG,MACvB,2D,aCGNoG,IAAS1B,OACP,kBAAC,IAAD,KACE,kBZdyB,SAAC,GAIvB,IAHL2B,EAGI,EAHJA,SAGI,IAFJC,0BAEI,MAFiB1K,EAEjB,EADD2K,EACC,mDAC0C/I,qBAD1C,mBACGd,EADH,KACoB8J,EADpB,OAEoBhJ,qBAFpB,mBAEGZ,EAFH,KAES6J,EAFT,OAG4BjJ,qBAH5B,mBAGGkJ,EAHH,KAGgBC,EAHhB,OAI0BnJ,oBAAS,GAJnC,mBAIGiB,EAJH,KAIYmI,EAJZ,OAK8BpJ,oBAAS,GALvC,mBAKGqJ,EALH,KAKcC,EALd,KAOJC,oBAAU,YACO,sCAAG,oCAAAhC,EAAA,qEACYiC,IAAkBT,GAD9B,UACVU,EADU,OAEhBN,EAASM,IAELpL,OAAOK,SAASgL,OAAOC,SAAS,SAJpB,iCAKaF,EAAcG,yBAL3B,gBAKNC,EALM,EAKNA,SACRf,EAAmBe,GANL,yBAScJ,EAAcvK,kBAT5B,WASVA,EATU,OAWhB8J,EAAmB9J,IAEfA,EAbY,kCAcKuK,EAAcK,UAdnB,QAcR1K,EAdQ,OAed6J,EAAQ7J,GAfM,QAkBhBgK,GAAW,GAlBK,0CAAH,qDAoBfW,IAEC,IAEH,IAAMC,EAAc,sCAAG,0CAAAzC,EAAA,4DAAO9E,EAAP,+BAAgB,GACrC6G,GAAa,GADQ,kBAGbJ,EAAYc,eAAevH,GAHd,uDAKnB8D,QAAQrF,MAAR,MALmB,yBAOnBoI,GAAa,GAPM,sCASFJ,EAAYY,UATV,QASf1K,EATe,OAUrB6J,EAAQ7J,GACR4J,GAAmB,GAXE,6DAAH,qDAcdY,EAAsB,sCAAG,4BAAArC,EAAA,4DAC7B6B,GAAW,GADkB,SAEvBF,EAAYU,yBAFW,uBAGVV,EAAYY,UAHF,OAGvB1K,EAHuB,OAI7BgK,GAAW,GACXJ,GAAmB,GACnBC,EAAQ7J,GANqB,yCAAH,qDAQ5B,OACE,kBAACR,EAAaqL,SAAd,CACEvD,MAAO,CACLxH,kBACAE,OACA6B,UACAoI,YACAW,iBACAJ,yBACAM,iBAAkB,kBAAUhB,EAAYgB,iBAAZ,MAAAhB,EAAW,YACvC/J,kBAAmB,kBAAU+J,EAAY/J,kBAAZ,MAAA+J,EAAW,YACxC5B,iBAAkB,kBAAU4B,EAAY5B,iBAAZ,MAAA4B,EAAW,YACvCiB,kBAAmB,kBAAUjB,EAAYiB,kBAAZ,MAAAjB,EAAW,YACxC7J,OAAQ,kBAAU6J,EAAY7J,OAAZ,MAAA6J,EAAW,cAG9BL,IY5DH,CACEuB,OAAQC,GAAOD,OACfE,UAAWD,GAAOE,SAClBC,SAAUH,GAAOG,SACjBC,aAAcJ,GAAOI,aACrB3B,mBAjBqB,SAAAe,GACzBxL,OAAOC,QAAQC,aACb,GACAC,SAASC,MACToL,GAAYA,EAASa,UACjBb,EAASa,UACTrM,OAAOK,SAASC,YAalB,kBAAC,GAAD,QAGJH,SAASmM,eAAe,SDgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e8985ac1.chunk.js","sourcesContent":["// src/react-auth0-wrapper.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from \"react\";\nimport \"../styles/App.css\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\n\nfunction Header() {\n  const { isAuthenticated, loginWithRedirect, logout, user } = useAuth0();\n\n  return (\n    <nav className=\"Nav\">\n      <div className=\"Nav-menus\">\n        <div className=\"Nav-brand\">\n          <Link className=\"Nav-brand-logo\" to=\"./\">\n            Instagram\n          </Link>\n        </div>\n        {!isAuthenticated && (\n          <>\n            <button\n              className=\"Nav-user-button button-no-style\"\n              onClick={() => loginWithRedirect({})}\n            />\n          </>\n        )}\n\n        {isAuthenticated && (\n          <>\n            <Link className=\"Nav-user-button\" to={\"./user/\" + user.sub} />\n          </>\n        )}\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React, { useState, useRef } from \"react\";\nimport \"../styles/App.css\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\n\nconst FETCH_LIKES = gql`\n  query($id: Int!, $userId: String!) {\n    Post(where: { id: { _eq: $id } }) {\n      Likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      Likes(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n`;\n\nconst LIKE_POST = gql`\n  mutation($postId: Int!, $userId: String!) {\n    insert_Like(objects: [{ post_id: $postId, user_id: $userId }]) {\n      affected_rows\n    }\n  }\n`;\n\nconst DELETE_LIKE = gql`\n  mutation($postId: Int!, $userId: String!) {\n    delete_Like(\n      where: { user_id: { _eq: $userId }, post_id: { _eq: $postId } }\n    ) {\n      affected_rows\n    }\n  }\n`;\n\nfunction Like(props) {\n  const { isAuthenticated, user } = useAuth0();\n\n  // stores if the currently logged in user has liked the post\n  const [liked, setLiked] = useState(false);\n  // stores the number of likes\n  const [countLikes, setCountLikes] = useState(-1);\n\n  // will store value of userId for the lifetime of component\n  const userId = useRef(null);\n\n  if (isAuthenticated) {\n    userId.current = user.sub;\n  } else {\n    userId.current = \"none\";\n  }\n\n  // like post mutation\n  const [likePost] = useMutation(LIKE_POST, {\n    variables: { postId: props.postId, userId: userId.current },\n    refetchQueries: [\n      {\n        query: FETCH_LIKES,\n        variables: { id: props.postId, userId: userId.current }\n      }\n    ]\n  });\n\n  // delete post mutation\n  const [deleteLike] = useMutation(DELETE_LIKE, {\n    variables: { postId: props.postId, userId: userId.current },\n    refetchQueries: [\n      {\n        query: FETCH_LIKES,\n        variables: { id: props.postId, userId: userId.current }\n      }\n    ]\n  });\n\n  // fetch number of likes and array with like_id if user has already liked the post or an empty array\n  const { loading, error, data } = useQuery(FETCH_LIKES, {\n    variables: { id: props.postId, userId: userId.current }\n  });\n\n  // if above useQuery data is not loaded\n  if (loading) return \"Loading...\";\n  // if data fetch failed\n  if (error) return `Error! ${error.message}`;\n\n  // countLikes is used to ensure that it should only run for the first time\n  if (countLikes === -1) {\n    // if the user has already liked the post, we know that data has loaded now so we can reference data.Post\n    if (data.Post[0].Likes.length > 0) {\n      setLiked(true);\n    }\n\n    // store value of number of likes in state, we are putting check conditions to prevent infinite loops\n    setCountLikes(data.Post[0].Likes_aggregate.aggregate.count);\n  }\n\n  return (\n    <div className=\"post-like-container\">\n      {isAuthenticated && (\n        <>\n          {!liked && (\n            <button\n              className=\"post-like-button-white button-nodec\"\n              onClick={() => {\n                likePost();\n                setLiked(true);\n                setCountLikes(countLikes + 1);\n              }}\n            />\n          )}\n          {liked && (\n            <button\n              className=\"post-like-button-black button-nodec\"\n              onClick={() => {\n                deleteLike();\n                setLiked(false);\n                setCountLikes(countLikes - 1);\n              }}\n            />\n          )}\n        </>\n      )}\n      {countLikes ? <span className=\"Post-likes\">{countLikes} likes</span> : null}\n    </div>\n  );\n}\n\nexport default Like;\n","function timeDifference(current, previous) {\n    const milliSecondsPerMinute = 60 * 1000\n    const milliSecondsPerHour = milliSecondsPerMinute * 60\n    const milliSecondsPerDay = milliSecondsPerHour * 24\n    const milliSecondsPerMonth = milliSecondsPerDay * 30\n    const milliSecondsPerYear = milliSecondsPerDay * 365\n  \n    const elapsed = current - previous\n  \n    if (elapsed < milliSecondsPerMinute / 3) {\n      return 'just now'\n    }\n  \n    if (elapsed < milliSecondsPerMinute) {\n      return 'less than 1 min ago'\n    } else if (elapsed < milliSecondsPerHour) {\n      return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\n    } else if (elapsed < milliSecondsPerDay) {\n      return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n    } else if (elapsed < milliSecondsPerMonth) {\n      return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n    } else if (elapsed < milliSecondsPerYear) {\n      return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n    } else {\n      return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n    }\n  }\n  \n  export function timeDifferenceForDate(date) {\n    const now = new Date().getTime()\n    const updated = new Date(date).getTime()\n    return timeDifference(now, updated)\n  }","import React from \"react\";\nimport \"../styles/App.css\";\nimport { gql } from \"apollo-boost\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Like from \"./Like.js\";\nimport { timeDifferenceForDate } from \"../utils/TimeDifference.js\";\nimport { Container } from \"react-bootstrap\";\n\nexport const POST_INFO = gql`\n  query($id: Int!) {\n    Post(where: { id: { _eq: $id } }) {\n      id\n      caption\n      created_at\n      url\n      User {\n        avatar\n        id\n        name\n      }\n    }\n  }\n`;\n\nfunction Post(props) {\n  let postId = props.id ? props.id : props.match.params.id;\n\n  const { loading, error, data } = useQuery(POST_INFO, {\n    variables: { id: postId }\n  });\n\n  if (loading) return \"\";\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <Container>\n        {data.Post.map((post, index) => (\n          <article className=\"Post\" key={index}>\n            <header>\n              <div className=\"Post-user\">\n                <div className=\"Post-user-avatar\">\n                  <Link to={\"./user/\" + post.User.id}>\n                    <img alt={post.User.name} src={post.User.avatar} />\n                  </Link>\n                </div>\n                <div className=\"Post-user-nickname\">\n                  <Link className=\"anchor-nodec\" to={\"./user/\" + post.User.id}>\n                    <span>{post.User.name}</span>\n                  </Link>\n                </div>\n              </div>\n            </header>\n            <div className=\"Post-image\">\n              <div className=\"Post-image-bg\">\n                <img alt={post.caption} src={post.url} />\n              </div>\n            </div>\n            <Like postId={postId} />\n            <div className=\"Post-caption\">\n              <Link className=\"anchor-nodec\" to={\"./user/\" + post.User.id}>\n                <strong>{post.User.name}</strong>\n              </Link>\n              &nbsp;{post.caption}\n            </div>\n            <div className=\"Post-time\">\n              {timeDifferenceForDate(post.created_at)}\n            </div>\n          </article>\n        ))}\n      </Container>\n    </>\n  );\n}\n\nexport default Post;\n","import React, { useState, useRef } from \"react\";\nimport \"../styles/App.css\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\nimport { Button } from \"react-bootstrap\";\nimport { NUMBER_OF_FOLLOWERS, NUMBER_OF_FOLLOWING } from \"./Profile.js\";\n\nconst FETCH_FOLLWERS = gql`\n  query($followingId: String!, $userId: String!) {\n    Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      id\n    }\n  }\n`;\n\nconst FOLLOW_USER = gql`\n  mutation($followingId: String!, $userId: String!) {\n    insert_Follow(\n      objects: [{ follower_id: $userId, following_id: $followingId }]\n    ) {\n      affected_rows\n    }\n  }\n`;\n\nconst UNFOLLOW_USER = gql`\n  mutation($followingId: String!, $userId: String!) {\n    delete_Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      affected_rows\n    }\n  }\n`;\n\nfunction Follow(props) {\n  const { isAuthenticated, user } = useAuth0();\n\n  // stores if the currently logged in user has followed the user\n  const [followed, setFollowed] = useState(false);\n\n  // stores if this is the first render of component\n  const firstRun = useRef(true);\n\n  // will store value of userId for the lifetime of component\n  const userId = useRef(null);\n\n  if (isAuthenticated) {\n    userId.current = user.sub;\n  } else {\n    userId.current = \"none\";\n  }\n\n  // follow user mutation\n  const [followUser] = useMutation(FOLLOW_USER, {\n    variables: { followingId: props.id, userId: userId.current },\n    refetchQueries: [\n      {\n        query: FETCH_FOLLWERS,\n        variables: { followingId: props.id, userId: userId.current }\n      },\n      {\n        query: NUMBER_OF_FOLLOWERS,\n        variables: { id: props.id }\n      },\n      {\n        query: NUMBER_OF_FOLLOWING,\n        variables: { id: userId.current }\n      }\n    ]\n  });\n\n  // unfollow user mutation\n  const [unfollowUser] = useMutation(UNFOLLOW_USER, {\n    variables: { followingId: props.id, userId: userId.current },\n    refetchQueries: [\n      {\n        query: FETCH_FOLLWERS,\n        variables: { followingId: props.id, userId: userId.current }\n      },\n      {\n        query: NUMBER_OF_FOLLOWERS,\n        variables: { id: props.id }\n      },\n      {\n        query: NUMBER_OF_FOLLOWING,\n        variables: { id: userId.current }\n      }\n    ]\n  });\n\n  // fetch array with id if current user already follows the user or an empty array\n  const { loading, error, data } = useQuery(FETCH_FOLLWERS, {\n    variables: { followingId: props.id, userId: userId.current }\n  });\n\n  // if above useQuery data is not loaded\n  if (loading) return \"Loading...\";\n  // if data fetch failed\n  if (error) return `Error! ${error.message}`;\n\n  // firstRun is used to ensure that it should only run for the first time\n  if (firstRun.current) {\n    // if current user already follows, set followed state variable to true\n    if (data.Follow.length > 0) {\n      setFollowed(true);\n    }\n\n    firstRun.current = false;\n  }\n\n  return (\n    <div className=\"post-like-container\">\n      {!followed && (\n        <Button\n          variant=\"outline-secondary\"\n          className=\"profile-logout\"\n          onClick={() => {\n            followUser();\n            setFollowed(true);\n          }}\n        >\n          Follow\n        </Button>\n      )}\n      {followed && (\n        <Button\n          variant=\"outline-success\"\n          className=\"profile-logout\"\n          onClick={() => {\n            unfollowUser();\n            setFollowed(false);\n          }}\n        >\n          Following\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default Follow;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport { withRouter } from \"react-router\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport { gql } from \"apollo-boost\";\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\nimport { Link } from \"react-router-dom\";\nimport Follow from \"./Follow.js\";\n\nexport const USER_INFO = gql`\n  query($id: String!) {\n    User(where: { id: { _eq: $id } }) {\n      email\n      avatar\n      last_seen\n      name\n      Posts_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n    Post(where: { user_id: { _eq: $id } }) {\n      url\n      caption\n      id\n    }\n  }\n`;\n\nexport const NUMBER_OF_FOLLOWING = gql`\n  query($id: String!) {\n    Follow_aggregate(where: { follower_id: { _eq: $id } }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nexport const NUMBER_OF_FOLLOWERS = gql`\n  query($id: String!) {\n    Follow_aggregate(where: { following_id: { _eq: $id } }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nfunction Profile(props) {\n  const { isAuthenticated, logout, user } = useAuth0();\n\n  const isLoggedUser = () => {\n    if (user.sub === props.match.params.id) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const { loading, error, data } = useQuery(USER_INFO, {\n    variables: { id: props.match.params.id }\n  });\n\n  const dataFollowers = useQuery(NUMBER_OF_FOLLOWERS, {\n    variables: { id: props.match.params.id }\n  });\n\n  const dataFollowing = useQuery(NUMBER_OF_FOLLOWING, {\n    variables: { id: props.match.params.id }\n  });\n\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  if (dataFollowing.loading) return \"Loading...\";\n  if (dataFollowers.loading) return \"Loading...\";\n\n  if (dataFollowing.error) return `Error! ${error.message}`;\n  if (dataFollowers.error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <Container className=\"container\">\n        <Container className=\"profile-details\">\n          {data.User.map((user, index) => (\n            <Row key={index}>\n              <Col xs={4}>\n                <img\n                  className=\"profile-avatar\"\n                  alt={user.name}\n                  src={user.avatar}\n                />\n              </Col>\n              <Col>\n                <Row>\n                  <Col className=\"profile-username\" xs=\"auto\">\n                    {user.name}\n                  </Col>\n\n                  <Col className=\"profile-logout\" xs={4}>\n                    {isAuthenticated && (\n                      <>\n                        {isLoggedUser() && (\n                          <>\n                            <Button\n                              variant=\"outline-secondary\"\n                              className=\"profile-logout\"\n                              onClick={() => logout()}\n                            >\n                              Log Out\n                            </Button>\n                          </>\n                        )}\n                        {!isLoggedUser() && (\n                          <Follow id={props.match.params.id} />\n                        )}\n                      </>\n                    )}\n                  </Col>\n                </Row>\n                <Row>\n                  <Col className=\"profile-stats\" xs=\"auto\">\n                    <strong>{user.Posts_aggregate.aggregate.count}</strong>{\" \"}\n                    posts\n                  </Col>\n                  <Col className=\"profile-stats\" xs=\"auto\">\n                    <strong>\n                      {dataFollowers.data.Follow_aggregate.aggregate.count}\n                    </strong>{\" \"}\n                    followers\n                  </Col>\n                  <Col className=\"profile-stats\" xs=\"auto\">\n                    <strong>\n                      {dataFollowing.data.Follow_aggregate.aggregate.count}\n                    </strong>{\" \"}\n                    following\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          ))}\n        </Container>\n        <hr />\n        <Row>\n          {data.Post.map((post, index) => (\n            <Link to={\"./post/\" + post.id} key={index}>\n              <Col xs={4} className=\"profile-grid\">\n                <div class=\"profile-post-image\">\n                  <img\n                    className=\"profile-post-image\"\n                    alt={post.caption}\n                    src={post.url}\n                  />\n                </div>\n              </Col>\n            </Link>\n          ))}\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default withRouter(Profile);\n","import React from \"react\";\nimport \"../styles/App.css\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Container } from \"react-bootstrap\";\nimport Post from \"./Post.js\"\n\nexport const POST_LIST = gql`\n  {\n    Post(order_by: { created_at: desc }) {\n      id\n    }\n  }\n`;\n\nfunction Feed(props) {\n\n  const { loading, error, data } = useQuery(POST_LIST);\n\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n     {/* <Container> */}\n      {data.Post.map((post, index) => (\n          <Post id={post.id} key={index}/>\n      ))}\n     {/* </Container> */}\n    </>\n  );\n}\n\nexport default Feed;\n","import React, { useState } from \"react\";\nimport \"../styles/App.css\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Container, Modal, Button, Row } from \"react-bootstrap\";\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\nimport { POST_LIST } from \"./Feed.js\";\nimport { USER_INFO } from \"./Profile.js\";\n\nconst SUBMIT_POST = gql`\n  mutation($url: String!, $userId: String!, $caption: String!) {\n    insert_Post(objects: { url: $url, caption: $caption, user_id: $userId }) {\n      affected_rows\n    }\n  }\n`;\n\nfunction Upload() {\n  const [modalShow, setModalShow] = React.useState(false);\n\n  const { user } = useAuth0();\n\n  const [caption, setCaption] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const [submitPost] = useMutation(SUBMIT_POST);\n\n  return (\n    <>\n      <button\n        className=\"button-nodec post-upload-button\"\n        onClick={() => setModalShow(true)}\n      />\n\n      <Modal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">Upload</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container>\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                submitPost({\n                  variables: { caption, userId: user.sub, url },\n                  refetchQueries: [\n                    { query: POST_LIST },\n                    { query: USER_INFO, variables: { id: user.sub } }\n                  ]\n                }).catch(function(error) {\n                  console.log(error);\n                  setError(error.toString());\n                });\n                //You are having a controlled component where input value is determined by this.state._variable_name.\n                // So once you submit you have to clear your state which will clear your input automatically.\n                setCaption(\"\");\n                setUrl(\"\");\n              }}\n            >\n              <Row>\n                <span>Image Url (file upload is not supported currently):</span>\n              </Row>\n              <Row>\n                <input\n                  value={url}\n                  onChange={e => setUrl(e.target.value)}\n                  type=\"text\"\n                />\n              </Row>\n              <Row>\n                <span>Caption:</span>\n              </Row>\n              <Row>\n                <input\n                  value={caption}\n                  onChange={e => setCaption(e.target.value)}\n                  type=\"text\"\n                />\n              </Row>\n              <Row>\n                <Button\n                  variant=\"outline-dark\"\n                  className=\"profile-logout top-padding\"\n                  type=\"submit\"\n                  value=\"Submit\"\n                  onClick={() => setModalShow(false)}\n                >\n                  Submit\n                </Button>\n              </Row>\n              {error}\n            </form>\n          </Container>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default Upload;\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\n\n\nfunction SecuredRoute(props) {\n  const {component: Component, path} = props;\n  const { isAuthenticated, loginWithRedirect } = useAuth0();\n  return (\n    <Route path={path} render={() => {\n        if (!isAuthenticated) {\n          loginWithRedirect({});\n          return <div></div>;\n        }\n        return <Component />\n    }} />\n  );\n}\n\nexport default SecuredRoute;","import React, { useState } from \"react\";\nimport \"../styles/App.css\";\nimport Header from \"./Header.js\";\nimport Post from \"./Post.js\";\nimport Profile from \"./Profile.js\";\nimport Feed from \"./Feed.js\";\nimport Upload from \"./Upload.js\"\n\n// for authentication using auth0\nimport { useAuth0 } from \"../auth/react-auth0-wrapper\";\n\n// for routing\nimport { Switch, Route } from \"react-router-dom\";\nimport SecuredRoute from \"./SecuredRoute\";\n\n// for apollo client\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\n\nfunction App() {\n\n  const { isAuthenticated, user } = useAuth0();\n\n  // used state to get accessToken through getTokenSilently(), the component re-renders when state changes, thus we have\n  // our accessToken in apollo client instance.\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  const { getTokenSilently, loading } = useAuth0();\n  if (loading) {\n    return \"Loading...\";\n  }\n\n  // get access token\n  const getAccessToken = async () => {\n    // getTokenSilently() returns a promise\n    try {\n      const token = await getTokenSilently();\n      setAccessToken(token);\n      // console.log(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  getAccessToken();\n\n  // for apollo client\n  const httpLink = new HttpLink({\n    uri: \"https://instagram-clone-3.herokuapp.com/v1/graphql\"\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = accessToken;\n    if (token) {\n      return {\n        headers: {\n          ...headers,\n          authorization: `Bearer ${token}`\n        }\n      };\n    } else {\n      return {\n        headers: {\n          ...headers\n        }\n      };\n    }\n  });\n\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Header />\n      {isAuthenticated && <Upload />}\n      <Switch>\n        <Route exact path=\"./\" component={Feed} />\n        <Route path={\"./post/:id\"} component={Post} />\n        <SecuredRoute path={\"./user/:id\"} component={Profile} />\n        {/* <SecuredRoute path=\"/new-post\" component={NewPost} />\n        <SecuredRoute path={\"/user/:id\"} component={Profile} /> */}\n      </Switch>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Auth0Provider } from \"./auth/react-auth0-wrapper\";\nimport config from \"./auth/auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <BrowserRouter>\n    <Auth0Provider\n      domain={config.domain}\n      client_id={config.clientId}\n      audience={config.audience}\n      redirect_uri={config.redirect_uri}\n      onRedirectCallback={onRedirectCallback}\n    >\n      <App />\n    </Auth0Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}